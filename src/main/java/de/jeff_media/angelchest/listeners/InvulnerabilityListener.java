package de.jeff_media.angelchest.listeners;

import de.jeff_media.angelchest.Main;
import de.jeff_media.angelchest.nbt.NBTTags;
import de.jeff_media.jefflib.NBTAPI;
import org.bukkit.Bukkit;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class InvulnerabilityListener implements Listener {
    private final Main main;

    public InvulnerabilityListener() {
        this.main = Main.getInstance();
    }

    public static void removeGod(final Player player) {
        NBTAPI.removeNBT(player, NBTTags.IS_INVULNERABLE);
        Integer task = Main.getInstance().invulnerableTasks.get(player.getUniqueId());
        if(task==null) return;
        Bukkit.getScheduler().cancelTask(task);
        Main.getInstance().invulnerableTasks.remove(player.getUniqueId());
    }

    @EventHandler
    public void onPlayerJoin(final PlayerJoinEvent playerJoinEvent) {
        removeGod(playerJoinEvent.getPlayer());
    }

    @EventHandler
    public void onPlayerQuit(final PlayerQuitEvent playerQuitEvent) {
        removeGod(playerQuitEvent.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onPlayerDamage(final EntityDamageEvent entityDamageEvent) {
        Entity entity = entityDamageEvent.getEntity();
        if(entity.getType() != EntityType.PLAYER) {
            return;
        }
        Player player = (Player) entity;
        if(!NBTAPI.hasNBT(player,NBTTags.IS_INVULNERABLE)) {
            return;
        }
        entityDamageEvent.setCancelled(true);
    }

}
